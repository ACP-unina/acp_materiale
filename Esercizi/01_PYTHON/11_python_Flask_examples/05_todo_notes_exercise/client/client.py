import requests, random


notes = {}
tags = ['work', 'sport']
server_address = 'http://127.0.0.1:5001'


# Generate a random note
def generate_note():

    text = "note-" + str(random.randint(0,100))
    tag = tags[random.randint(0,1)]

    note = {'text' : text, 'tag': tag}

    return note


# Select an existing note a return the ID
def select_random_note():

    keys = list(notes.keys())
    keys_len = len(keys)

    random_existing_id = keys[random.randint(0, keys_len-1)]
    
    return random_existing_id



# Request the server to add a new note (a version is also stored locally)
# Return the ID generated by the server, in case of success, or -1 in case of errors
def add_note(note):

    # Build resource endpoint
    resourse_location = server_address + '/note'

    # Make a POST request containing the note as json payload
    resp = requests.post(resourse_location, json=note)

    # Check for response error
    try:
        resp.raise_for_status() ### la chiamata solleva un HTTPError se lo status code è diverso da 200

    except requests.exceptions.HTTPError:
        print("Received an error: " + str(resp.status_code))
        print(resp.json())
        return -1

    else:
        
        # Get the JSON response
        resp_json = resp.json()

        # Store a local version
        notes[resp_json['id']] = note

        return resp_json['id']


# Retrieve a note from the server and update the local version
# Return the note in case of success, -1 otherwise        
def get_note(id):

    # Build resource endpoint
    resourse_location = server_address + '/note/' + str(id)
    resp = requests.get(resourse_location)

    # Check for response error
    try:
        resp.raise_for_status() ### la chiamata solleva un HTTPError se lo status code è diverso da 200

    except requests.exceptions.HTTPError:
        print("Received an error: " + str(resp.status_code))
        print(resp.json())
        return -1

    else:

        # Get the JSON response
        resp_json = resp.json()

        # Update the local version
        notes[id] = resp_json

        return resp.json()


# Retrieve all notes from the server, and update the local versions 
# Return the notes in case of success, -1 otherwise
def get_notes():

    # Build resource endpoint
    resourse_location = server_address + '/notes'
    resp = requests.get(resourse_location)

    # Check for response error
    try:
        resp.raise_for_status() ### la chiamata solleva un HTTPError se lo status code è diverso da 200

    except requests.exceptions.HTTPError:
        print("Received an error: " + str(resp.status_code))
        print(resp.json())
        return -1

    else:
        # Get the JSON response
        resp_json = resp.json()

        # Store the new version locally
        for note in resp_json:
            notes[note['id']] = note['note']

        return resp_json


# Request the server to update a note (the updated version is also sotered locally)
# Return the ID of the updated note, in case of success, or -1 in case of errors
def update_note(id, note):

    # Build resource endpoint
    resourse_location = server_address + '/note/' + str(id)

    # Make an UPDATE request containing the note as json payload
    resp = requests.put(resourse_location, json=note)

    # Check for response error
    try:
        resp.raise_for_status() ### la chiamata solleva un HTTPError se lo status code è diverso da 200

    except requests.exceptions.HTTPError:
        print("Received an error: " + str(resp.status_code))
        print(resp.json())
        return -1

    else:
        
        # Get the JSON response
        resp_json = resp.json()

        # Store a local version
        notes[resp_json['id']] = note

        return resp_json['id']

# Request the server to remove a note (The note is also removed locally)
# Return the ID of the deleted note, in case of success, or -1 in case of errors
def del_note(id):

    # Build resource endpoint
    resourse_location = server_address + '/note/' + str(id)
    resp = requests.delete(resourse_location)

    # Check for response error
    try:
        resp.raise_for_status() ### la chiamata solleva un HTTPError se lo status code è diverso da 200

    except requests.exceptions.HTTPError:
        print("Received an error: " + str(resp.status_code))
        print(resp.json())
        return -1

    else:

        # Get the JSON response
        resp_json = resp.json()

        # Update the local version
        notes.pop(id)

        return resp.json()['id']


# Request the server to remove all notes (The notes are also removed locally)
# Return 0 in case of success, or -1 in case of errors
def del_notes():

    # Build resource endpoint
    resourse_location = server_address + '/notes'
    resp = requests.delete(resourse_location)

    # Check for response error
    try:
        resp.raise_for_status() ### la chiamata solleva un HTTPError se lo status code è diverso da 200

    except requests.exceptions.HTTPError:
        print("Received an error: " + str(resp.status_code))
        return -1

    else:

        # Get the JSON response
        resp_json = resp.json()

        # Update the local version
        notes.clear()

        return 0


if __name__ == "__main__":


    # Add new notes
    for i in range (2):
        note = generate_note()
        id_note = add_note(note)

        if id_note == -1:
            print("[MAIN] No note added")
        else:
            print("[MAIN] New note added with id:", id_note)
            print("[MAIN] Note:", str(notes[id_note]))

    # Retreive a note
    id_note = select_random_note()
    note = get_note(id_note)
    if id == -1:
        print("[MAIN] Retrieve failed")
    else:
        print("[MAIN] Retrieved note:" , str(note))

    # Retreieve all notes
    updated_notes = get_notes()
    if updated_notes == -1:
        print("[MAIN] Retrieve failed")
    else:
        print("[MAIN] Retrieved the following notes")

        for note in updated_notes:
            print(note)

    # Update a note
    note = generate_note()
    id_note = select_random_note()
    id_note = update_note(id_note, note)
    
    if id_note == -1:
        print("[MAIN] No note updated")
    else:
        print("[MAIN] Update the note with id:", id_note)
        print("[MAIN] Note:", str(notes[id_note]))


    # Delete a note
    id_note = select_random_note()
    id_note = del_note(id_note)

    if id_note == -1:
        print("[MAIN] No note deleted")
    else:
        print("[MAIN] Deleted the note with id:", id_note)

    # Delete all notes
    result = del_notes()

    if id_note == -1:
        print("[MAIN] No notes deleted")
    else:
        print("[MAIN] Deleted all notes")


        
    